{
    "collab_server" : "",
    "contents" : "extractProb(c(best), sb_test_fp1)\nextractProb(c(best, best), sb_test_fp1)\nboth = list(a = best, b = best)\nextactProb(both, sb_test_fp3)\nextractProb(both, sb_test_fp3)\nextractProb(both, sb_test_fp1)\nextractProb(both, sb_test_fp2)\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nmclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield >= X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb)\npred_self = mean(predict(model, fp) == (fp$yield > X))\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\nreglog = test_all_fp_models()\nView(reglog)\nbest = train(factor(yield) ~ ., data = fp0 %>% mutate(yield = yield > 0.3, yield = factor(yield)), trControl = tc, method = \"regLogistic\")\nextractProb(best, sb_test_fp0)\nextractProb(list(best), sb_test_fp0)\nfp0\nsb_test_fp0\nextractProb(list(best), sb_test_fp0 %>% select(-fp0))\nextractProb(list(best), sb_test_fp0)\npredict(best, sb_test_fp1, probab = T)\nextractProb(list(best), testX = sb_test_fp0)\npredict(best$finalModel, sb_test_fp0)\nbest$finalModel\npredict(best$finalModel, sb_test_fp0)\nlibrary(LiblineaR)\npredict(best$finalModel, sb_test_fp0)\npredict.train\npredictionFunction\npredict(best, sb_test_fp0)\npredict(best, sb_test_fp0, type type = \"prob\")\npredict(best, sb_test_fp0, type = \"prob\")\npredict(best, sb_test_fp0, type = \"prob\")[,2]\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nmclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield >= X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb)[,2]\npred_self = mean(predict(model, fp) == (fp$yield > X))\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\nreglog = test_all_fp_models()\npredict(best, sb_test_fp0, type = \"prob\")[,2]\npredict(best, sb_test_fp0, type = \"prob\")[,2][1]\npredict(best, sb_test_fp0, type = \"prob\")[,2][2]\ntest_model(fp0, sb_test_fp0)\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nmclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield >= X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb)[,2]\npred_self = mean(predict(model, fp) == (fp$yield > X))\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n) %>% print\n}) %>% bind_rows()\n}\ntest_model(fp0, sb_test_fp0)\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nlapply(seq(0.1, 0.9, 0.1), function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield >= X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb)[,2]\npred_self = mean(predict(model, fp) == (fp$yield > X))\nprint(pred)\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\ntest_model(fp0, sb_test_fp0)\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nlapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield >= X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb)\npred_self = mean(predict(model, fp) == (fp$yield > X))\nprint(pred)\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\ntest_model(fp0, sb_test_fp0)\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nlapply(seq(0.1, 0.9, 0.1), function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield >= X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb)\npred_self = mean(predict(model, fp) == (fp$yield > X))\nprint(pred)\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\ntest_model(fp0, sb_test_fp0)\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nmclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield >= X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb, type = \"prob\")[,2]\npred_self = mean(predict(model, fp) == (fp$yield > X))\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\ntest_model(fp0, sb_test_fp0)\nreglog = test_all_fp_models()\nView(rpart_2)\nView(reglog)\nrandomForest = test_all_fp_models(\"ranger\")\nrandomForest = test_all_fp_models(\"rf\")\ntc\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nmclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield > X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb, type = \"prob\")[,2]\npred_self = mean(predict(model, fp) == (fp$yield > X))\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\nset.seed(12345)\nreglog = test_all_fp_models()\nView(reglog)\nfp0$yield\nggplot(fp0, aes(yield)) + geom_histogram()\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.10)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11)\nquantile(fp0$yield)\nquantile(fp0$yield, probs = 0.60)\nquantile(fp0$yield, probs = 0.65)\nquantile(fp0$yield, probs = 0.62)\nquantile(fp0$yield, probs = 0.62)\nquantile(fp0$yield, probs = 0.65)\nlibrary(cowplot)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + scale_x_continuous(breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.05) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.05) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))\nlibrary(readr)\ndt0 <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/guess_0/results.csv\")\nView(results)\nView(dt0)\nlibrary(readr)\ndt1 <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/guess_1/results.csv\")\nView(dt1)\nlibrary(readr)\ndt2 <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/guess_2/results.csv\")\nView(dt1)\nlibrary(readr)\ndt3 <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/guess_3/results.csv\")\nView(dt3)\nView(dt2)\nggplot(reglog, aes(fp, kappa)) + geom_col()\nggplot(reglog, aes(fp, kappa)) + geom_col(position = \"identity\", fill = cutoff)\nggplot(reglog, aes(fp, kappa, fill = cutoff)) + geom_col(position = \"identity\")\nggplot(reglog, aes(fp, kappa, fill = factor(cutoff))) + geom_col(position = \"identity\")\nggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\ndt0$fp <- \"fp0\"\ndt1$fp <- \"fp1\"\ndt2$fp <- \"fp2\"\ndt3$fp <- \"fp3\"\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col()\nrbind(dt0, dt1, dt2, dt3)\nrbind(dt0, dt1, dt2, dt3) %>% View\nggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col()\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\nggplot(rbind(dt0, dt1, dt2), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\nggplot(rbind(dt0, dt1), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\nggplot(rbind(dt0), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\nggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = \"identity\")\nggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_line()\nggplot(reglog, aes(cutoff, kappa, colour = factor(fp))) + geom_line()\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, color = factor(fp))) + geom_line()\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, color = factor(fp))) + geom_line() + geom_point()\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point()\nsavehistory()\nsave.image()\nsavehistory()\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point()\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point()\nView(reglog)\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point(size=2)\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point(size=3)\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=3) + geom_point(size=3)\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3)\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x=\"Yield Cutoff\", y=\"Kappa\") + scale_x_continuous(breaks=seq(0.1,0.9,0.1))\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x=\"Yield Cutoff\", y=\"Kappa\") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1))\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x=\"Yield Cutoff\", y=\"Kappa\") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(-0.1,1.0))\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x=\"Yield Cutoff\", y=\"Kappa\") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(0.0,1.0))\nggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x=\"Yield Cutoff\", y=\"Kappa\") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(0.0,1.0))\nggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x=\"Yield Cutoff\", y=\"Kappa\") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(0.0,1.0))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))\nggplot(fp0, aes(yield)) + geom_violin()\nggplot(fp0, aes(yield)) + geom_boxplot()\nggplot(fp0, aes(x1, yield)) + geom_boxplot()\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), expand = c(0,0)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + scale_y_continuous(expand = c(0,0))\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.10001)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.1001)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.101)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.11)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(bins = 10)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.101)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.11)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01, fill = \"blue\") + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)\n.65 * 36\n.64 * 36\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01, fill = \"blue\") + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,16), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)\nggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01, fill = \"blue\") + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,16), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)\nggplot(fp0, aes(yield)) +\ngeom_histogram(binwidth = 0.11) +\ngeom_histogram(binwidth = .01, fill = \"blue\") +\nscale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) +\nscale_y_continuous(breaks = seq(1,16), expand = c(0,0)) +\ngeom_vline(xintercept = 0.7) +\ngeom_vline(xintercept = 0.4)\nfp0 %>%\nggplot(aes(yield)) +\ngeom_histogram(binwidth = 0.11) +\ngeom_histogram(binwidth = .01, fill = \"blue\") +\nscale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) +\nscale_y_continuous(breaks = seq(1,16), expand = c(0,0)) +\ngeom_vline(xintercept = 0.7) +\ngeom_vline(xintercept = 0.4)\nlibrary(readr)\nresults <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\")\nView(results)\nresults %>% gather(compound, -cutoff)\nresults %>% gather(compound, prob, cutoff)\nresults %>% gather(compound, prob, -cutoff)\nresults %>% gather(compound, prob, -cutoff) %>% View\nresults %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)\nresults %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% View\nlibrary(readr)\nresults <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\")\nView(results)\nresults %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% View\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)\ninstall.packages(\"irr\")\nlibrary(irr)\nkappa2\n?kappa\n?kappa2\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% filter(compound != \"kappa\", compound != \"self_score\")\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% filter(compound != \"kappa\", compound != \"self_score\") -> dt1_res\nrm(results)\ndt1_res\ncohen.kappa\ninstall.packages(\"library(psych)\")\ninstall.packages(\"psych\")\nlibrary(psych)\ncohen.kappa\nlibrary(readr)\nset_bits_test <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/set_bits_test.csv\")\nView(set_bits_test)\nlibrary(readr)\ntest <- read_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/test.csv\")\nView(test)\ncohen.kappa(data.frame(test$yield, dt1_res$`0.7`))\ncohen.kappa(data.frame(test$yield, dt1_res$`0.7` .> 0.5))\ncohen.kappa(data.frame(test$yield, dt1_res$`0.7` > 0.5))\ndt1_res$`0.7`\ndt1_res$`0.7` > 0.5)\ndt1_res$`0.7` > 0.5\ncohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.7` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.4` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.4` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.1` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.2` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.2` > 0.5)) -> derp\nderp$kappa\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>%\nselect(-kappa, -self_score) %>% View\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob)\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nsummarise_if(is.numeric, list(a = cohen.kappa(data.frame(test$yield == 1.0, .))))\nread_csv(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\") -> dt1_res\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob)\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nsummarise_if(is.numeric, list(a = cohen.kappa(data.frame(test$yield == 1.0, .))))\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) -> grr\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.2` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.3` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.4` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.5` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.6` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.7` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.8` > 0.5))\ncohen.kappa(data.frame(test$yield == 1.0, grr$`0.9` > 0.5))\nView(dt1_res)\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nsummarise_if(is.numeric, list(a = cohen.kappa(data.frame(test$yield == 1.0, .))))\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nsummarise_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, .))))\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nsummarise_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))))\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nmutate_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))))\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nmutate_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) )\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) %>%\nsummarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) )\ndt1_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) ->\ndt1_res\ndt1_res %>%\nsummarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%\nmutate(cutoff = \"kappa\") %>%\nrbind(dt1_res)\ndt1_res %>%\nsummarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%\nmutate(cutoff = \"kappa\")\nView(dt1_res)\ndt1_res %>%\nsummarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%\nmutate(compound = \"kappa\") %>%\nrbind(dt1_res)\ndt1_res %>%\nsummarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%\nmutate(compound = \"kappa\") %>%\nrbind(dt1_res) %>%\nwrite_csv(\"dt1_res.csv\")\nprocess_dt_data <- function(input, output) {\nread_csv(input) -> dt_res\ndt_res %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob) ->\ndt_res\ndt_res %>%\nsummarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%\nmutate(compound = \"kappa\") %>%\nrbind(dt1_res) %>%\nwrite_csv(output)\n}\nprocess_dt_data(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv\", \"dt1_res.csv\")\nprocess_dt_data(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp2/results.csv\", \"dt2_res.csv\")\nprocess_dt_data(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp3/results.csv\", \"dt3_res.csv\")\nprocess_dt_data(\"/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp0/results.csv\", \"dt0_res.csv\")\nrm(dt1_res)\nrm(grr)\nrm(tune_grid)\nrm(test, best)\nrm(both, derp)\nrm(grrr)\nrm(model, maybe)\nrm(reglog_2)\nfp0 <- read_csv(\"../train36_predict14/fp0/set_bits.csv\") %>% mutate_if(is.character, as.logical)\nfp1 <- read_csv(\"../train36_predict14/fp1/set_bits.csv\") %>% mutate_if(is.character, as.logical)\nfp2 <- read_csv(\"../train36_predict14/fp2/set_bits.csv\") %>% mutate_if(is.character, as.logical)\nfp3 <- read_csv(\"../train36_predict14/fp3/set_bits.csv\") %>% mutate_if(is.character, as.logical)\nread_csv(\"../train36_predict14/fp0/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp0\nread_csv(\"../train36_predict14/fp1/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp1\nread_csv(\"../train36_predict14/fp2/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp2\nread_csv(\"../train36_predict14/fp3/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp3\ntest_model <- function(fp, sb, method = \"regLogistic\") {\nmclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {\ntrain(factor(yield) ~ .,\ndata = fp %>% mutate(yield = yield > X),\ntrControl = tc,\nmethod = method\n) -> model\npred = predict(model, sb, type = \"prob\")[,2]\npred_self = mean(predict(model, fp) == (fp$yield > X))\ntibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),\nc01 = pred[01], c02 = pred[02], c03 = pred[03], c04 = pred[04], c05 = pred[05],\nc06 = pred[06], c07 = pred[07], c08 = pred[08], c09 = pred[09], c10 = pred[10],\nc11 = pred[11], c12 = pred[12], c13 = pred[13], c14 = pred[14],\nself_score = pred_self\n)\n}) %>% bind_rows()\n}\ntest_all_fp_models <- function(method = \"regLogistic\") {\nfp0_res = test_model(fp0, sb_test_fp0, method) %>% mutate(fp = \"fp0\")\nfp1_res = test_model(fp1, sb_test_fp1, method) %>% mutate(fp = \"fp1\")\nfp2_res = test_model(fp2, sb_test_fp2, method) %>% mutate(fp = \"fp2\")\nfp3_res = test_model(fp3, sb_test_fp3, method) %>% mutate(fp = \"fp3\")\nbind_rows(fp0_res, fp1_res, fp2_res, fp3_res)\n}\nset.seed(12345)\nreglog = test_all_fp_models()\nView(reglog)\n?train\nset.seed(12345)\ntest_all_fp_models(\"knn\")\nknn <- .Last.value\ntest_all_fp_models(\"lasso\")\ngetModelInfo()\ngetModelInfo(\"lasso\")\ntest_all_fp_models(\"glm\")\nglm < .Last.value\n.Last.value\nglm <- .Last.value\ntest_all_fp_models(\"pls\")\nView(glm)\ntest_all_fp_models(\"pls\")\npls <- .Last.value\nView(pls)\npca <- test_all_fp_models(\"pca\")\nmlp <- test_all_fp_models(\"mlp\")\nView(glm)\nView(glm)\nglm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff)\nglm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff, -fp)\ndt_res\ndt1_res\nView(dt0)\ndt0 %>%\nselect(-kappa, -self_score) %>%\ngather(compound, prob, -cutoff) %>%\nspread(cutoff, prob)\nglm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff, -fp) %>% spread(cutoff, prob)\nglm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff, -fp) %>% spread(cutoff, prob) %>% group_by(fp) %>% summarise_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ))\ntest\nsavehistory()\n",
    "created" : 1569878664435.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "190827315",
    "id" : "5781303C",
    "lastKnownWriteTime" : 1569878713,
    "last_content_update" : 1569878713,
    "path" : "/storage/jonathan_fine/0062_mop_reactions/other_models/.Rhistory",
    "project_path" : ".Rhistory",
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_history"
}