{
    "data" : [
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "fp0 %>%",
        "+ ",
        "  ggplot(aes(yield)) +",
        "+ ",
        "  geom_histogram(binwidth = 0.11) +",
        "+ ",
        "  geom_histogram(binwidth = .01, fill = \"blue\") +",
        "+ ",
        "  scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) +",
        "+ ",
        "  scale_y_continuous(breaks = seq(1,16), expand = c(0,0)) +",
        "+ ",
        "  geom_vline(xintercept = 0.7) +",
        "+ ",
        "  geom_vline(xintercept = 0.4)",
        "> ",
        "fp0 %>%",
        "+ ",
        "  ggplot(aes(yield)) +",
        "+ ",
        "  geom_histogram(binwidth = 0.11) +",
        "+ ",
        "  geom_histogram(binwidth = .01, fill = \"blue\") +",
        "+ ",
        "  scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) +",
        "+ ",
        "  scale_y_continuous(breaks = seq(1,17), expand = c(0,0)) +",
        "+ ",
        "  geom_vline(xintercept = 0.7) +",
        "+ ",
        "  geom_vline(xintercept = 0.4)",
        "> ",
        "fp0 %>%",
        "+ ",
        "  ggplot(aes(yield)) +",
        "+ ",
        "  geom_histogram(binwidth = 0.11) +",
        "+ ",
        "  geom_histogram(binwidth = .01, fill = \"blue\") +",
        "+ ",
        "  scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0)) +",
        "+ ",
        "  scale_y_continuous(breaks = seq(1,17), expand = c(0,0)) +",
        "+ ",
        "  geom_vline(xintercept = 0.7) +",
        "+ ",
        "  geom_vline(xintercept = 0.4)",
        "> ",
        "View(rf_res)",
        "> ",
        "\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.7), tcControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 36, 36, 36, 36, 36, 36, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n    2   0.7769145  0.00000000\n   66   0.7388735  0.04699778\n  130   0.7415401  0.03420413\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 2.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), tcControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 36, 36, 36, 36, 36, 36, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n    2   0.6746823  0.01205479\n   66   0.8692933  0.67387549\n  130   0.8698527  0.67436926\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 130.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), tcControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 36, 36, 36, 36, 36, 36, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n    2   0.6571968  0.03691919\n   66   0.8785712  0.72410852\n  130   0.8774174  0.72792633\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "process_caret_data(ranger) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "View(ranger)",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), tcControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 36, 36, 36, 36, 36, 36, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n    2   0.6503145  0.02626866\n   66   0.8896008  0.74972544\n  130   0.8851406  0.73768193\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "tc",
        "$method\n[1] \"LOOCV\"\n\n$number\n[1] 25\n\n$repeats\n[1] NA\n\n$search\n[1] \"grid\"\n\n$p\n[1] 0.75\n\n$initialWindow\nNULL\n\n$horizon\n[1] 1\n\n$fixedWindow\n[1] TRUE\n\n$skip\n[1] 0\n\n$verboseIter\n[1] FALSE\n\n$returnData\n[1] TRUE\n\n$returnResamp\n[1] \"final\"\n\n$savePredictions\n[1] FALSE\n\n$classProbs\n[1] FALSE\n\n$summaryFunction\nfunction (data, lev = NULL, model = NULL) \n{\n    if (is.character(data$obs)) \n        data$obs <- factor(data$obs, levels = lev)\n    postResample(data[, \"pred\"], data[, \"obs\"])\n}\n<bytecode: 0x9f22318>\n<environment: namespace:caret>\n",
        "\n$selectionFunction\n[1] \"best\"\n\n$preProcOptions\n$preProcOptions$thresh\n[1] 0.95\n\n$preProcOptions$ICAcomp\n[1] 3\n\n$preProcOptions$k\n[1] 5\n\n$preProcOptions$freqCut\n[1] 19\n\n$preProcOptions$uniqueCut\n[1] 10\n\n$preProcOptions$cutoff\n[1] 0.9\n\n\n$sampling\nNULL\n\n$index\nNULL\n\n$indexOut\nNULL\n\n$indexFinal\nNULL\n\n$timingSamps\n[1] 0\n\n$predictionBounds\n[1] FALSE FALSE\n\n$seeds\n[1] NA\n\n$adaptive\n$adaptive$min\n[1] 5\n\n$adaptive$alpha\n[1] 0.05\n\n$adaptive$method\n[1] \"gls\"\n\n$adaptive$complete\n[1] TRUE\n\n\n$trim\n[1] FALSE\n\n$allowParallel\n",
        "[1] TRUE\n\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), tcControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 36, 36, 36, 36, 36, 36, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n    2   0.6597803  0.01263158\n   66   0.8583149  0.64260425\n  130   0.8518039  0.62271316\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), tcControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 36, 36, 36, 36, 36, 36, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n    2   0.6519026  0.05555556\n   66   0.8682974  0.67930502\n  130   0.8515841  0.63747238\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), tcControl = trainControl(\"loocv\"), method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Bootstrapped (25 reps) \nSummary of sample sizes: 36, 36, 36, 36, 36, 36, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa     \n    2   0.6965681  0.01635368\n   66   0.8633373  0.59731721\n  130   0.8541689  0.57343295\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), trControl = trainControl(\"loocv\"), method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Leave-One-Out Cross-Validation \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa\n    2   0.6666667  0    \n   66   0.9444444  0    \n  130   0.9444444  0    \n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "Warning message:\n",
        "In nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo,  :",
        "\n ",
        " There were missing values in resampled performance measures.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), trControl = trainControl(\"loocv\"), method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Leave-One-Out Cross-Validation \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa\n    2   0.6666667  0    \n   66   0.9444444  0    \n  130   0.9444444  0    \n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "Warning message:\n",
        "In nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo,  :",
        "\n ",
        " There were missing values in resampled performance measures.\n",
        "> ",
        ".Last.value$results$Kappa",
        "[1] 0 0 0\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), trControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Leave-One-Out Cross-Validation \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa    \n    2   0.6666667  0.0000000\n   66   0.9444444  0.8695652\n  130   0.9444444  0.8695652\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), trControl = tc, method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Leave-One-Out Cross-Validation \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa    \n    2   0.6666667  0.0000000\n   66   0.9444444  0.8695652\n  130   0.9444444  0.8695652\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), trControl = trainControl(\"loocv\"), method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Leave-One-Out Cross-Validation \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa\n    2   0.6666667  0    \n   66   0.9444444  0    \n  130   0.9444444  0    \n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "Warning message:\n",
        "In nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo,  :",
        "\n ",
        " There were missing values in resampled performance measures.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), trControl = trainControl(\"LOOCV\"), method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Leave-One-Out Cross-Validation \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa    \n    2   0.6666667  0.0000000\n   66   0.9444444  0.8695652\n  130   0.9444444  0.8695652\n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "> ",
        "train(factor(yield) ~ ., data = fp1 %>% mutate(yield = yield > 0.4), trControl = trainControl(\"loocv\"), method = \"rf\")",
        "Random Forest \n\n 36 samples\n130 predictors\n  2 classes: 'FALSE', 'TRUE' \n\nNo pre-processing\nResampling: Leave-One-Out Cross-Validation \nSummary of sample sizes: 35, 35, 35, 35, 35, 35, ... \nResampling results across tuning parameters:\n\n  mtry  Accuracy   Kappa\n    2   0.6666667  0    \n   66   0.9444444  0    \n  130   0.9444444  0    \n\nAccuracy was used to select the optimal model using the largest value.\nThe final value used for the model was mtry = 66.\n",
        "Warning message:\n",
        "In nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo,  :",
        "\n ",
        " There were missing values in resampled performance measures.\n",
        "> ",
        "trainControl(\"loocv\")",
        "$method\n[1] \"loocv\"\n\n$number\n[1] 10\n\n$repeats\n[1] NA\n\n$search\n[1] \"grid\"\n\n$p\n[1] 0.75\n\n$initialWindow\nNULL\n\n$horizon\n[1] 1\n\n$fixedWindow\n[1] TRUE\n\n$skip\n[1] 0\n\n$verboseIter\n[1] FALSE\n\n$returnData\n[1] TRUE\n\n$returnResamp\n[1] \"final\"\n\n$savePredictions\n[1] FALSE\n\n$classProbs\n[1] FALSE\n\n$summaryFunction\nfunction (data, lev = NULL, model = NULL) \n{\n    if (is.character(data$obs)) \n        data$obs <- factor(data$obs, levels = lev)\n    postResample(data[, \"pred\"], data[, \"obs\"])\n}\n<bytecode: 0x133f4ac8>\n<environment: namespace:caret>\n",
        "\n$selectionFunction\n[1] \"best\"\n\n$preProcOptions\n$preProcOptions$thresh\n[1] 0.95\n\n$preProcOptions$ICAcomp\n[1] 3\n\n$preProcOptions$k\n[1] 5\n\n$preProcOptions$freqCut\n[1] 19\n\n$preProcOptions$uniqueCut\n[1] 10\n\n$preProcOptions$cutoff\n[1] 0.9\n\n\n$sampling\nNULL\n\n$index\nNULL\n\n$indexOut\nNULL\n\n$indexFinal\nNULL\n\n$timingSamps\n[1] 0\n\n$predictionBounds\n[1] FALSE FALSE\n\n$seeds\n[1] NA\n\n$adaptive\n$adaptive$min\n[1] 5\n\n$adaptive$alpha\n[1] 0.05\n\n$adaptive$method\n[1] \"gls\"\n\n$adaptive$complete\n[1] TRUE\n\n\n$trim\n[1] FALSE\n\n$allowParallel\n",
        "[1] TRUE\n\n",
        "> ",
        "trainControl(\"LOOCV\")",
        "$method\n[1] \"LOOCV\"\n\n$number\n[1] 25\n\n$repeats\n[1] NA\n\n$search\n[1] \"grid\"\n\n$p\n[1] 0.75\n\n$initialWindow\nNULL\n\n$horizon\n[1] 1\n\n$fixedWindow\n[1] TRUE\n\n$skip\n[1] 0\n\n$verboseIter\n[1] FALSE\n\n$returnData\n[1] TRUE\n\n$returnResamp\n[1] \"final\"\n\n$savePredictions\n[1] FALSE\n\n$classProbs\n[1] FALSE\n\n$summaryFunction\nfunction (data, lev = NULL, model = NULL) \n{\n    if (is.character(data$obs)) \n        data$obs <- factor(data$obs, levels = lev)\n    postResample(data[, \"pred\"], data[, \"obs\"])\n}\n<bytecode: 0x133f4ac8>\n<environment: namespace:caret>\n",
        "\n$selectionFunction\n[1] \"best\"\n\n$preProcOptions\n$preProcOptions$thresh\n[1] 0.95\n\n$preProcOptions$ICAcomp\n[1] 3\n\n$preProcOptions$k\n[1] 5\n\n$preProcOptions$freqCut\n[1] 19\n\n$preProcOptions$uniqueCut\n[1] 10\n\n$preProcOptions$cutoff\n[1] 0.9\n\n\n$sampling\nNULL\n\n$index\nNULL\n\n$indexOut\nNULL\n\n$indexFinal\nNULL\n\n$timingSamps\n[1] 0\n\n$predictionBounds\n[1] FALSE FALSE\n\n$seeds\n[1] NA\n\n$adaptive\n$adaptive$min\n[1] 5\n\n$adaptive$alpha\n[1] 0.05\n\n$adaptive$method\n[1] \"gls\"\n\n$adaptive$complete\n[1] TRUE\n\n\n$trim\n[1] FALSE\n\n$allowParallel\n",
        "[1] TRUE\n\n",
        "> ",
        "reglog = test_all_fp_models()",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "fp0 <- read_csv(\"../train36_predict14/fp0/set_bits.csv\") %>% mutate_if(is.character, as.logical)",
        "Parsed with column specification:\ncols(\n  .default = col_character(),\n  yield = col_double()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "fp1 <- read_csv(\"../train36_predict14/fp1/set_bits.csv\") %>% mutate_if(is.character, as.logical)",
        "Parsed with column specification:\ncols(\n  .default = col_character(),\n  yield = col_double()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "fp2 <- read_csv(\"../train36_predict14/fp2/set_bits.csv\") %>% mutate_if(is.character, as.logical)",
        "Parsed with column specification:\ncols(\n  .default = col_character(),\n  yield = col_double()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "fp3 <- read_csv(\"../train36_predict14/fp3/set_bits.csv\") %>% mutate_if(is.character, as.logical)",
        "Parsed with column specification:\ncols(\n  .default = col_character(),\n  yield = col_double()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "",
        "> ",
        "read_csv(\"../train36_predict14/fp0/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp0",
        "Parsed with column specification:\ncols(\n  .default = col_character()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "read_csv(\"../train36_predict14/fp1/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp1",
        "Parsed with column specification:\ncols(\n  .default = col_character()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "read_csv(\"../train36_predict14/fp2/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp2",
        "Parsed with column specification:\ncols(\n  .default = col_character()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "read_csv(\"../train36_predict14/fp3/set_bits_test.csv\") %>% mutate_all(as.logical)-> sb_test_fp3",
        "Parsed with column specification:\ncols(\n  .default = col_character()\n)\n",
        "See spec(...) for full column specifications.\n",
        "> ",
        "reglog = test_all_fp_models()",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "reglog = test_all_fp_models()",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp3/results.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 15 x 10\n   `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8` `0.9` compound\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 0.222 0.44  0.44  0.314 0.340 0.340 0.462 0.462 0.533 kappa   \n 2 0.502 0.492 0.490 0.500 1     1     1     1     0.249 c01     \n 3 0.573 0.495 1     0.497 0.421 0.393 0.382 0.380 0.398 c02     \n 4 0.669 0     0.277 0.475 0.673 0.682 0.333 0.333 0.125 c03     \n 5 1     1     1     1     1     1     1     1     1     c04     \n 6 0     0     0     0     0     0     0     0     0     c05     \n",
        " 7 1     0.664 0.490 0.500 0     0     0     0     0.127 c06     \n 8 0.501 0     0     0.946 1     1     0.667 0.667 0     c07     \n 9 1     1     1     1     1     1     1     1     0.249 c08     \n10 0     0     0     0.946 1     1     0.667 0.667 0     c09     \n11 1     1     1     1     1     1     1     1     0.249 c10     \n12 1     1     1     1     1     1     1     1     1     c11     \n13 1     1     1     1     1     1     1     1     0.249 c12     \n14 1     1     1     1     1     1     1     1     0.249 c13     \n",
        "15 1     1     1     1     1     1     1     1     1     c14     \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp1/results.csv\") ",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 15 x 10\n   `0.1` `0.2`  `0.3` `0.4` `0.5`  `0.6` `0.7` `0.8` `0.9` compound\n   <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 0.44  0.588 0.588  0.588 0.571 0.720  0.720 0.720 0.533 kappa   \n 2 0.495 0.507 0.535  0.502 0.474 1      1     1     0.5   c01     \n 3 0     0     0.0802 0     0     0      0     0     0     c02     \n 4 0.109 0     0.0834 0     0     0.334  0     0     0     c03     \n 5 1     1     1      1     1     1      1     1     1     c04     \n 6 0     0     0      0     0     0      0     0     0     c05     \n",
        " 7 0.522 0.588 0.585  0.502 0.441 0.0416 0     0     0     c06     \n 8 0     0     0      0     0     0.334  0     0     0     c07     \n 9 1     1     1      1     0.937 1      1     1     0.5   c08     \n10 0     0     0      0     0     0.334  0     0     0     c09     \n11 1     1     1      1     1     1      1     1     0.5   c10     \n12 1     1     1      1     1     1      1     1     1     c11     \n13 1     1     1      1     0.938 1      1     1     0.5   c12     \n14 1     1     1      1     0.875 1      1     1     0.5   c13     \n",
        "15 1     1     1      1     1     1      1     1     1     c14     \n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% write_csv(\"dt1_res.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "reglog = test_all_fp_models()",
        "[1] \"FP0\"\n[1] \"FP1\"\n[1] \"FP2\"\n[1] \"FP3\"\n",
        "> ",
        "knn <- test_all_fp_models(\"knn\")",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "glm <- test_all_fp_models(\"glm\")",
        "[1] \"FP0\"\n[1] \"FP1\"\n[1] \"FP2\"\n[1] \"FP3\"\n",
        "> ",
        "pls <- test_all_fp_models(\"pls\")",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "pls <- test_all_fp_models(\"pls\")",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% write_csv(\"dt0_res.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% write_csv(\"dt2_res.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% write_csv(\"dt3_res.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "> ",
        "pls <- test_all_fp_models(\"pls\")",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "pls <- test_all_fp_models(\"pls\")",
        "[1] \"FP0\"\n[1] \"FP1\"\n[1] \"FP2\"\n",
        "\n",
        "> ",
        "pls <- test_all_fp_models(\"pls\")",
        "[1] \"FP0\"\n[1] \"FP1\"\n",
        "\n",
        "\nRestarting R session...\n\n",
        "> ",
        "pls <- test_all_fp_models(\"pls\")",
        "[1] \"FP0\"\n",
        "Error in test_model(fp0, sb_test_fp0, method) %>% mutate(fp = \"fp0\") : \n  could not find function \"%>%\"\n",
        "> ",
        "library(parallel)",
        "> ",
        "library(tidyverse)",
        "── Attaching packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ──\n",
        "✔ ggplot2 3.1.1     ✔ purrr   0.2.5\n✔ tibble  1.4.2     ✔ dplyr   0.7.6\n✔ tidyr   0.8.1     ✔ stringr 1.3.1\n✔ readr   1.1.1     ✔ forcats 0.3.0\n",
        "── Conflicts ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n",
        "> ",
        "library(caret)",
        "Loading required package: lattice\n",
        "\nAttaching package: ‘caret’\n\n",
        "The following object is masked from ‘package:purrr’:\n\n    lift\n\n",
        "> ",
        "pls <- test_all_fp_models(\"pls\")",
        "[1] \"FP0\"\n[1] \"FP1\"\n[1] \"FP2\"\n[1] \"FP3\"\n",
        "> ",
        "knn <- test_all_fp_models(\"knn\")",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "process_caret_data(pls)",
        "Error in summarise_impl(.data, dots) : \n  Evaluation error: could not find function \"cohen.kappa\".\n",
        "> ",
        "library(psych)",
        "\nAttaching package: ‘psych’\n\n",
        "The following objects are masked from ‘package:ggplot2’:\n\n    %+%, alpha\n\n",
        "> ",
        "process_caret_data(pls)",
        "# A tibble: 60 x 11\n   fp    `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8` `0.9` compound\n   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 fp0   0.601 0.415 0.471 0.512 0.591 0.653 0.375 0.375 0.376 c01     \n 2 fp0   0.679 0.529 0.599 0.512 0.604 0.589 0.431 0.431 0.304 c02     \n 3 fp0   0.766 0.619 0.487 0.361 0.492 0.503 0.437 0.437 0.314 c03     \n 4 fp0   0.411 0.560 0.519 0.527 0.498 0.460 0.539 0.539 0.597 c04     \n 5 fp0   0.212 0.144 0.166 0.256 0.140 0.140 0.245 0.245 0.189 c05     \n",
        " 6 fp0   0.660 0.563 0.525 0.481 0.522 0.607 0.463 0.463 0.412 c06     \n 7 fp0   0.327 0.346 0.400 0.404 0.323 0.258 0.346 0.346 0.236 c07     \n 8 fp0   0.645 0.631 0.694 0.661 0.664 0.597 0.463 0.463 0.323 c08     \n 9 fp0   0.327 0.346 0.400 0.404 0.323 0.258 0.346 0.346 0.236 c09     \n10 fp0   0.789 0.680 0.703 0.618 0.734 0.735 0.463 0.463 0.346 c10     \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(pls) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "knn <- test_all_fp_models(\"knn\")",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "knn <- test_all_fp_models(\"knn\")",
        "[1] \"FP0\"\n",
        "\n",
        "> ",
        "knn <- test_all_fp_models(\"knn\")",
        "[1] \"FP0\"\n[1] \"FP1\"\n[1] \"FP2\"\n[1] \"FP3\"\n",
        "> ",
        "View(pls)",
        "> ",
        "process_caret_data(pls)",
        "# A tibble: 60 x 11\n   fp    `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8` `0.9` compound\n   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 fp0   0.601 0.415 0.471 0.512 0.591 0.653 0.375 0.375 0.376 c01     \n 2 fp0   0.679 0.529 0.599 0.512 0.604 0.589 0.431 0.431 0.304 c02     \n 3 fp0   0.766 0.619 0.487 0.361 0.492 0.503 0.437 0.437 0.314 c03     \n 4 fp0   0.411 0.560 0.519 0.527 0.498 0.460 0.539 0.539 0.597 c04     \n 5 fp0   0.212 0.144 0.166 0.256 0.140 0.140 0.245 0.245 0.189 c05     \n",
        " 6 fp0   0.660 0.563 0.525 0.481 0.522 0.607 0.463 0.463 0.412 c06     \n 7 fp0   0.327 0.346 0.400 0.404 0.323 0.258 0.346 0.346 0.236 c07     \n 8 fp0   0.645 0.631 0.694 0.661 0.664 0.597 0.463 0.463 0.323 c08     \n 9 fp0   0.327 0.346 0.400 0.404 0.323 0.258 0.346 0.346 0.236 c09     \n10 fp0   0.789 0.680 0.703 0.618 0.734 0.735 0.463 0.463 0.346 c10     \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(pls) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(reglog) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(knn)",
        "# A tibble: 60 x 11\n   fp    `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8`  `0.9` compound\n   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <chr>   \n 1 fp0   0.333 0.333 0.333 0.333 0.333 0.333 0.25  0.25  0.167  c01     \n 2 fp0   0.455 0.364 0.364 0.364 0.364 0.273 0.273 0.273 0.182  c02     \n 3 fp0   0.556 0.222 0.111 0.111 0.111 0.111 0.111 0.111 0      c03     \n 4 fp0   0.417 0.375 0.375 0.375 0.417 0.333 0.333 0.333 0.25   c04     \n 5 fp0   0.4   0.2   0.2   0.2   0.2   0.2   0.2   0.2   0.1    c05     \n",
        " 6 fp0   0.545 0.429 0.286 0.286 0.273 0.273 0.273 0.273 0.182  c06     \n 7 fp0   0.417 0.143 0.143 0.143 0.25  0.167 0.167 0.167 0.0833 c07     \n 8 fp0   0.556 0.556 0.556 0.556 0.556 0.444 0.333 0.333 0.222  c08     \n 9 fp0   0.417 0.143 0.143 0.143 0.25  0.167 0.167 0.167 0.0833 c09     \n10 fp0   0.455 0.364 0.364 0.364 0.364 0.273 0.273 0.273 0.182  c10     \n# ... with 50 more rows\n",
        "> ",
        "process_caret_data(knn) %>% select(compound, everything())",
        "# A tibble: 60 x 11\n   compound fp    `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8`  `0.9`\n   <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>\n 1 c01      fp0   0.333 0.333 0.333 0.333 0.333 0.333 0.25  0.25  0.167 \n 2 c02      fp0   0.455 0.364 0.364 0.364 0.364 0.273 0.273 0.273 0.182 \n 3 c03      fp0   0.556 0.222 0.111 0.111 0.111 0.111 0.111 0.111 0     \n 4 c04      fp0   0.417 0.375 0.375 0.375 0.417 0.333 0.333 0.333 0.25  \n 5 c05      fp0   0.4   0.2   0.2   0.2   0.2   0.2   0.2   0.2   0.1   \n",
        " 6 c06      fp0   0.545 0.429 0.286 0.286 0.273 0.273 0.273 0.273 0.182 \n 7 c07      fp0   0.417 0.143 0.143 0.143 0.25  0.167 0.167 0.167 0.0833\n 8 c08      fp0   0.556 0.556 0.556 0.556 0.556 0.444 0.333 0.333 0.222 \n 9 c09      fp0   0.417 0.143 0.143 0.143 0.25  0.167 0.167 0.167 0.0833\n10 c10      fp0   0.455 0.364 0.364 0.364 0.364 0.273 0.273 0.273 0.182 \n# ... with 50 more rows\n",
        "> ",
        "process_caret_data(glm) %>% select(compound, everything())",
        "# A tibble: 60 x 11\n   compound fp        `0.1`     `0.2`     `0.3`     `0.4`     `0.5`     `0.6`     `0.7`     `0.8`     `0.9`\n   <chr>    <chr>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>\n 1 c01      fp0    2.22e-16 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1\n 2 c02      fp0   10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1  4.11e-12\n 3 c03      fp0    2.22e-16  9.84e- 1 10.00e- 1 10.00e- 1 10.00e- 1  1.17e-10  4.44e-11  4.44e-11  2.22e-16\n",
        " 4 c04      fp0    2.22e-16  2.73e- 9 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1\n 5 c05      fp0    2.22e-16  2.22e-16  7.88e-12  7.88e-12  2.98e-12  3.11e-12  3.07e-12  3.07e-12  3.01e-12\n 6 c06      fp0    2.22e-16  2.02e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1  1.90e-12\n 7 c07      fp0    2.22e-16  2.22e-16  7.88e-12  7.88e-12  2.22e-12  2.22e-16  2.22e-16  2.22e-16  2.22e-16\n 8 c08      fp0    1.65e- 4 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1  9.03e-12  1.02e-11  1.02e-11  2.22e-16\n",
        " 9 c09      fp0    2.22e-16  2.22e-16  7.88e-12  7.88e-12  2.22e-12  2.22e-16  2.22e-16  2.22e-16  2.22e-16\n10 c10      fp0   10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1 10.00e- 1  4.39e-12\n# ... with 50 more rows\n",
        "> ",
        "process_caret_data(pls) %>% select(compound, everything())",
        "# A tibble: 60 x 11\n   compound fp    `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8` `0.9`\n   <chr>    <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 c01      fp0   0.601 0.415 0.471 0.512 0.591 0.653 0.375 0.375 0.376\n 2 c02      fp0   0.679 0.529 0.599 0.512 0.604 0.589 0.431 0.431 0.304\n 3 c03      fp0   0.766 0.619 0.487 0.361 0.492 0.503 0.437 0.437 0.314\n 4 c04      fp0   0.411 0.560 0.519 0.527 0.498 0.460 0.539 0.539 0.597\n 5 c05      fp0   0.212 0.144 0.166 0.256 0.140 0.140 0.245 0.245 0.189\n",
        " 6 c06      fp0   0.660 0.563 0.525 0.481 0.522 0.607 0.463 0.463 0.412\n 7 c07      fp0   0.327 0.346 0.400 0.404 0.323 0.258 0.346 0.346 0.236\n 8 c08      fp0   0.645 0.631 0.694 0.661 0.664 0.597 0.463 0.463 0.323\n 9 c09      fp0   0.327 0.346 0.400 0.404 0.323 0.258 0.346 0.346 0.236\n10 c10      fp0   0.789 0.680 0.703 0.618 0.734 0.735 0.463 0.463 0.346\n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(pls) %>% select(compound, everything()) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(pls) %>% select(compound, everything()) %>% select(-`0.8`) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(reglog) %>% select(compound, everything()) %>% select(-`0.8`) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(reglog) %>% select(compound, everything()) %>% select(-`0.8`) %>% write_csv(\"reglog.csv\")",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(glm) %>% select(compound, everything()) %>% select(-`0.8`) %>% write_csv(\"glm.csv\")",
        "> ",
        "process_caret_data(pls) %>% select(compound, everything()) %>% select(-`0.8`) %>% write_csv(\"pls.csv\")",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(knn) %>% select(compound, everything()) %>% select(-`0.8`) %>% write_csv(\"knn.csv\")",
        "> ",
        "process_caret_data(ranger)",
        "# A tibble: 60 x 11\n   fp    `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8` `0.9` compound\n   <chr> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 fp0   0.622 0.626 0.746 0.844 0.804 0.406 0.792 0.804 0.144 c01     \n 2 fp0   0.5   0.508 0.544 0.478 0.514 0.286 0.63  0.668 0.034 c02     \n 3 fp0   0.8   0.676 0.264 0.25  0.318 0.186 0.372 0.356 0.034 c03     \n 4 fp0   0.758 0.836 0.78  0.83  0.83  0.346 0.888 0.896 0.278 c04     \n 5 fp0   0.034 0     0     0     0     0.016 0.002 0.002 0.002 c05     \n",
        " 6 fp0   0.73  0.754 0.644 0.728 0.698 0.316 0.8   0.8   0.09  c06     \n 7 fp0   0.08  0.036 0.02  0.018 0.044 0.074 0.002 0.006 0.012 c07     \n 8 fp0   0.85  0.854 0.884 0.896 0.82  0.388 0.652 0.62  0.084 c08     \n 9 fp0   0.08  0.036 0.02  0.018 0.044 0.074 0.002 0.006 0.012 c09     \n10 fp0   0.898 0.918 0.938 0.932 0.918 0.496 0.924 0.932 0.104 c10     \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_caret_data(ranger) %>% View",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "",
        "> ",
        "library(rpart)",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.7)))",
        "n= 36 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 36 8 FALSE (0.7777778 0.2222222) *\n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.6)))",
        "n= 36 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 36 9 FALSE (0.7500000 0.2500000) *\n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.7)), cp = 1)",
        "n= 36 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 36 8 FALSE (0.7777778 0.2222222) *\n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.7)), cp = -1)",
        "n= 36 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 36 8 FALSE (0.7777778 0.2222222)  \n  2) x5< 0.5 26 4 FALSE (0.8461538 0.1538462)  \n    4) x73< 0.5 10 0 FALSE (1.0000000 0.0000000) *\n    5) x73>=0.5 16 4 FALSE (0.7500000 0.2500000) *\n  3) x5>=0.5 10 4 FALSE (0.6000000 0.4000000) *\n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1)",
        "n= 36 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n1) root 36 12 FALSE (0.6666667 0.3333333)  \n  2) x47>=0.5 18  3 FALSE (0.8333333 0.1666667) *\n  3) x47< 0.5 18  9 FALSE (0.5000000 0.5000000) *\n",
        "> ",
        "library(rpart.plot)",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1) %>% rpart.plot()",
        "Warning message:\n",
        "Bad 'data' field in model 'call' (expected a data.frame or a matrix).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE. \n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minspit = 5) %>% rpart.plot()",
        "Error in rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)),  : \n  Argument minspit not matched\n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minsplit = 5) %>% rpart.plot()",
        "Warning message:\n",
        "Bad 'data' field in model 'call' (expected a data.frame or a matrix).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE. \n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minsplit = 5)",
        "n= 36 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n 1) root 36 12 FALSE (0.66666667 0.33333333)  \n   2) x24< 0.5 30  6 FALSE (0.80000000 0.20000000)  \n     4) x61< 0.5 26  2 FALSE (0.92307692 0.07692308)  \n       8) x6< 0.5 24  1 FALSE (0.95833333 0.04166667)  \n        16) x14< 0.5 19  0 FALSE (1.00000000 0.00000000) *\n        17) x14>=0.5 5  1 FALSE (0.80000000 0.20000000)  \n          34) x39>=0.5 2  0 FALSE (1.00000000 0.00000000) *\n          35) x39< 0.5 3  1 FALSE (0.66666667 0.33333333) *",
        "\n       9) x6>=0.5 2  1 FALSE (0.50000000 0.50000000) *\n     5) x61>=0.5 4  0 TRUE (0.00000000 1.00000000) *\n   3) x24>=0.5 6  0 TRUE (0.00000000 1.00000000) *\n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minsplit = 5) %>% rpart.plot()",
        "Warning message:\n",
        "Bad 'data' field in model 'call' (expected a data.frame or a matrix).\nTo silence this warning:\n    Call rpart.plot with roundint=FALSE,\n    or rebuild the rpart model with model=TRUE. \n",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minsplit = 5, model = T) %>% rpart.plot()",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minsplit = 6, model = T) %>% rpart.plot()",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minsplit = 9, model = T) %>% rpart.plot()",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), minsplit = 9, model = T) %>% rpart.plot()",
        "> ",
        "rpart(yield ~ ., fp1 %>% mutate(yield = factor(yield > 0.4)), cp = -1, minsplit = 9, model = T) %>% rpart.plot()",
        "> ",
        ".17 * 36",
        "[1] 6.12\n",
        "> ",
        ".166 * 36",
        "[1] 5.976\n",
        "> ",
        ".167 * 36",
        "[1] 6.012\n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp2/results.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 15 x 10\n   `0.1` `0.2` `0.3` `0.4` `0.5`  `0.6` `0.7` `0.8` `0.9` compound\n   <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 0.44  0.588 0.462 0.588 0.571 0.720  0.720 0.720 0.533 kappa   \n 2 0.495 0.508 0.505 0.504 0.468 1      1     1     0.245 c01     \n 3 0     0     0.667 0     0     0      0     0     0     c02     \n 4 0.112 0     0     0     0     0.348  0     0     0     c03     \n 5 1     1     1     1     1     1      1     1     1     c04     \n 6 0     0     0     0     0     0      0     0     0     c05     \n",
        " 7 0.523 0.589 0.505 0.504 0.436 0.0358 0     0     0     c06     \n 8 0     0     0     0     0     0.327  0     0     0     c07     \n 9 1     1     1     1     0.938 1      1     1     0.245 c08     \n10 0     0     0     0     0     0.327  0     0     0     c09     \n11 1     1     1     1     1     1      1     1     0.245 c10     \n12 1     1     1     1     1     1      1     1     1     c11     \n13 1     1     1     1     0.938 1      1     1     0.245 c12     \n14 1     1     1     1     0.875 1      1     1     0.245 c13     \n",
        "15 1     1     1     1     1     1      1     1     1     c14     \n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 15 x 10\n   `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8` `0.9` compound\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 0.222 0.462 0.588 0.588 0.588 0.588 0.588 0.588 0.533 kappa   \n 2 1     1     1     1     1     1     1     1     0.5   c01     \n 3 0     0     0.5   0     0     0     0     0     0     c02     \n 4 1     1     0.5   0     0     0     0     0     0     c03     \n 5 1     1     1     1     1     1     1     1     1     c04     \n 6 0     0     0     0     0     0     0     0     0     c05     \n",
        " 7 1     1     1     1     1     1     1     1     0.5   c06     \n 8 1     0     0     0     0     0     0     0     0     c07     \n 9 1     1     1     1     0.839 0.837 0.661 0.670 0.332 c08     \n10 1     0     0     0     0     0     0     0     0     c09     \n11 1     1     1     1     1     1     1     1     0.5   c10     \n12 1     1     1     1     1     1     1     1     1     c11     \n13 1     1     1     1     1     1     1     1     0.5   c12     \n14 1     1     1     1     0.839 0.837 0.661 0.670 0.332 c13     \n",
        "15 1     1     1     1     1     1     1     1     1     c14     \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\")) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\")) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\"))",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 60 x 10\n   `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.8` `0.9` compound\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>   \n 1 0.222 0.462 0.588 0.588 0.588 0.588 0.588 0.588 0.533 kappa   \n 2 1     1     1     1     1     1     1     1     0.5   c01     \n 3 0     0     0.5   0     0     0     0     0     0     c02     \n 4 1     1     0.5   0     0     0     0     0     0     c03     \n 5 1     1     1     1     1     1     1     1     1     c04     \n 6 0     0     0     0     0     0     0     0     0     c05     \n",
        " 7 1     1     1     1     1     1     1     1     0.5   c06     \n 8 1     0     0     0     0     0     0     0     0     c07     \n 9 1     1     1     1     0.839 0.837 0.661 0.670 0.332 c08     \n10 1     0     0     0     0     0     0     0     0     c09     \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\")) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\")) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\")) %>% select(-`0.8`) %>% select(compound, everything())",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 60 x 9\n   compound `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.9`\n   <chr>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 kappa    0.222 0.462 0.588 0.588 0.588 0.588 0.588 0.533\n 2 c01      1     1     1     1     1     1     1     0.5  \n 3 c02      0     0     0.5   0     0     0     0     0    \n 4 c03      1     1     0.5   0     0     0     0     0    \n 5 c04      1     1     1     1     1     1     1     1    \n 6 c05      0     0     0     0     0     0     0     0    \n 7 c06      1     1     1     1     1     1     1     0.5  \n",
        " 8 c07      1     0     0     0     0     0     0     0    \n 9 c08      1     1     1     1     0.839 0.837 0.661 0.332\n10 c09      1     0     0     0     0     0     0     0    \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\")) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\")) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\")) %>% select(-`0.8`) %>% select(compound, everything()) %>% View",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% mutate(fp =0) %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% mutate(fp = 1)) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% mutate(fp=2)) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% mutate(fp=3)) %>% select(-`0.8`) %>% select(compound, everything()) %>% View",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% mutate(fp =0) %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% mutate(fp = 1)) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% mutate(fp=2)) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% mutate(fp=3)) %>% select(-`0.8`) %>% select(compound, fp, everything()) %>% arrange(compound)",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 60 x 10\n   compound    fp `0.1` `0.2`  `0.3` `0.4` `0.5` `0.6` `0.7` `0.9`\n   <chr>    <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 c01          0 1     1     1      1     1     1     1     0.5  \n 2 c01          1 0.495 0.507 0.535  0.502 0.474 1     1     0.5  \n 3 c01          2 0.495 0.508 0.505  0.504 0.468 1     1     0.245\n 4 c01          3 0.502 0.492 0.490  0.500 1     1     1     0.249\n 5 c02          0 0     0     0.5    0     0     0     0     0    \n 6 c02          1 0     0     0.0802 0     0     0     0     0    \n",
        " 7 c02          2 0     0     0.667  0     0     0     0     0    \n 8 c02          3 0.573 0.495 1      0.497 0.421 0.393 0.382 0.398\n 9 c03          0 1     1     0.5    0     0     0     0     0    \n10 c03          1 0.109 0     0.0834 0     0     0.334 0     0    \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% mutate(fp =0) %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% mutate(fp = 1)) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% mutate(fp=2)) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% mutate(fp=3)) %>% select(-`0.8`) %>% select(compound, fp, everything()) %>% group_by(fp) %>% arrange(compound)",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 60 x 10\n# Groups:   fp [4]\n   compound    fp `0.1` `0.2`  `0.3` `0.4` `0.5` `0.6` `0.7` `0.9`\n   <chr>    <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 c01          0 1     1     1      1     1     1     1     0.5  \n 2 c01          1 0.495 0.507 0.535  0.502 0.474 1     1     0.5  \n 3 c01          2 0.495 0.508 0.505  0.504 0.468 1     1     0.245\n 4 c01          3 0.502 0.492 0.490  0.500 1     1     1     0.249\n 5 c02          0 0     0     0.5    0     0     0     0     0    \n 6 c02          1 0     0     0.0802 0     0     0     0     0    \n",
        " 7 c02          2 0     0     0.667  0     0     0     0     0    \n 8 c02          3 0.573 0.495 1      0.497 0.421 0.393 0.382 0.398\n 9 c03          0 1     1     0.5    0     0     0     0     0    \n10 c03          1 0.109 0     0.0834 0     0     0.334 0     0    \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% mutate(fp =0) %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% mutate(fp = 1)) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% mutate(fp=2)) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% mutate(fp=3)) %>% select(-`0.8`) %>% select(compound, fp, everything()) %>% group_by(fp) %>% arrange(compound) %>% View",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% mutate(fp =0) %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% mutate(fp = 1)) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% mutate(fp=2)) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% mutate(fp=3)) %>% select(-`0.8`) %>% select(compound, fp, everything()) %>% arrange(fp, compound)",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "# A tibble: 60 x 10\n   compound    fp `0.1` `0.2` `0.3` `0.4` `0.5` `0.6` `0.7` `0.9`\n   <chr>    <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n 1 c01          0     1     1   1       1 1     1     1     0.5  \n 2 c02          0     0     0   0.5     0 0     0     0     0    \n 3 c03          0     1     1   0.5     0 0     0     0     0    \n 4 c04          0     1     1   1       1 1     1     1     1    \n 5 c05          0     0     0   0       0 0     0     0     0    \n 6 c06          0     1     1   1       1 1     1     1     0.5  \n",
        " 7 c07          0     1     0   0       0 0     0     0     0    \n 8 c08          0     1     1   1       1 0.839 0.837 0.661 0.332\n 9 c09          0     1     0   0       0 0     0     0     0    \n10 c10          0     1     1   1       1 1     1     1     0.5  \n# ... with 50 more rows\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% mutate(fp =0) %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% mutate(fp = 1)) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% mutate(fp=2)) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% mutate(fp=3)) %>% select(-`0.8`) %>% select(compound, fp, everything()) %>% arrange(fp, compound) %>% View",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "> ",
        "process_dt_data(\"../train36_predict14/fp0/results.csv\") %>% mutate(fp =0) %>% rbind(process_dt_data(\"../train36_predict14/fp1/results.csv\") %>% mutate(fp = 1)) %>% rbind(process_dt_data(\"../train36_predict14/fp2/results.csv\") %>% mutate(fp=2)) %>% rbind(process_dt_data(\"../train36_predict14/fp3/results.csv\") %>% mutate(fp=3)) %>% select(-`0.8`) %>% select(compound, fp, everything()) %>% arrange(fp, compound) %>% write_csv(\"dt.csv\")",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Parsed with column specification:\ncols(\n  c01 = col_double(),\n  c02 = col_double(),\n  c03 = col_double(),\n  c04 = col_double(),\n  c05 = col_double(),\n  c06 = col_double(),\n  c07 = col_double(),\n  c08 = col_double(),\n  c09 = col_double(),\n  c10 = col_double(),\n  c11 = col_double(),\n  c12 = col_double(),\n  c13 = col_double(),\n  c14 = col_double(),\n  self_score = col_double(),\n  kappa = col_double(),\n  cutoff = col_double()\n)\n",
        "Warning messages:\n",
        "1: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "2: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "3: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "4: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "5: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n",
        "6: ",
        "In cohen.kappa1(x, w = w, n.obs = n.obs, alpha = alpha, levels = levels) :",
        "\n ",
        " upper or lower confidence interval exceed  abs(1)  and set to +/- 1. \n"
    ],
    "type" : [
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        2,
        2,
        2,
        0,
        1,
        3,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        2,
        0,
        1,
        2,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        2,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        2,
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        2,
        2,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3
    ]
}