extractProb(c(best), sb_test_fp1)
extractProb(c(best, best), sb_test_fp1)
both = list(a = best, b = best)
extactProb(both, sb_test_fp3)
extractProb(both, sb_test_fp3)
extractProb(both, sb_test_fp1)
extractProb(both, sb_test_fp2)
test_model <- function(fp, sb, method = "regLogistic") {
mclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield >= X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb)
pred_self = mean(predict(model, fp) == (fp$yield > X))
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
)
}) %>% bind_rows()
}
reglog = test_all_fp_models()
View(reglog)
best = train(factor(yield) ~ ., data = fp0 %>% mutate(yield = yield > 0.3, yield = factor(yield)), trControl = tc, method = "regLogistic")
extractProb(best, sb_test_fp0)
extractProb(list(best), sb_test_fp0)
fp0
sb_test_fp0
extractProb(list(best), sb_test_fp0 %>% select(-fp0))
extractProb(list(best), sb_test_fp0)
predict(best, sb_test_fp1, probab = T)
extractProb(list(best), testX = sb_test_fp0)
predict(best$finalModel, sb_test_fp0)
best$finalModel
predict(best$finalModel, sb_test_fp0)
library(LiblineaR)
predict(best$finalModel, sb_test_fp0)
predict.train
predictionFunction
predict(best, sb_test_fp0)
predict(best, sb_test_fp0, type type = "prob")
predict(best, sb_test_fp0, type = "prob")
predict(best, sb_test_fp0, type = "prob")[,2]
test_model <- function(fp, sb, method = "regLogistic") {
mclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield >= X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb)[,2]
pred_self = mean(predict(model, fp) == (fp$yield > X))
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
)
}) %>% bind_rows()
}
reglog = test_all_fp_models()
predict(best, sb_test_fp0, type = "prob")[,2]
predict(best, sb_test_fp0, type = "prob")[,2][1]
predict(best, sb_test_fp0, type = "prob")[,2][2]
test_model(fp0, sb_test_fp0)
test_model <- function(fp, sb, method = "regLogistic") {
mclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield >= X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb)[,2]
pred_self = mean(predict(model, fp) == (fp$yield > X))
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
) %>% print
}) %>% bind_rows()
}
test_model(fp0, sb_test_fp0)
test_model <- function(fp, sb, method = "regLogistic") {
lapply(seq(0.1, 0.9, 0.1), function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield >= X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb)[,2]
pred_self = mean(predict(model, fp) == (fp$yield > X))
print(pred)
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
)
}) %>% bind_rows()
}
test_model(fp0, sb_test_fp0)
test_model <- function(fp, sb, method = "regLogistic") {
lapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield >= X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb)
pred_self = mean(predict(model, fp) == (fp$yield > X))
print(pred)
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
)
}) %>% bind_rows()
}
test_model(fp0, sb_test_fp0)
test_model <- function(fp, sb, method = "regLogistic") {
lapply(seq(0.1, 0.9, 0.1), function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield >= X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb)
pred_self = mean(predict(model, fp) == (fp$yield > X))
print(pred)
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
)
}) %>% bind_rows()
}
test_model(fp0, sb_test_fp0)
test_model <- function(fp, sb, method = "regLogistic") {
mclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield >= X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb, type = "prob")[,2]
pred_self = mean(predict(model, fp) == (fp$yield > X))
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
)
}) %>% bind_rows()
}
test_model(fp0, sb_test_fp0)
reglog = test_all_fp_models()
View(rpart_2)
View(reglog)
randomForest = test_all_fp_models("ranger")
randomForest = test_all_fp_models("rf")
tc
test_model <- function(fp, sb, method = "regLogistic") {
mclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield > X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb, type = "prob")[,2]
pred_self = mean(predict(model, fp) == (fp$yield > X))
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c1 = pred[1], c2 = pred[2], c3 = pred[3], c4 = pred[4], c5 = pred[5], c6 = pred[6],
self_score = pred_self
)
}) %>% bind_rows()
}
set.seed(12345)
reglog = test_all_fp_models()
View(reglog)
fp0$yield
ggplot(fp0, aes(yield)) + geom_histogram()
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.10)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11)
quantile(fp0$yield)
quantile(fp0$yield, probs = 0.60)
quantile(fp0$yield, probs = 0.65)
quantile(fp0$yield, probs = 0.62)
quantile(fp0$yield, probs = 0.62)
quantile(fp0$yield, probs = 0.65)
library(cowplot)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + scale_x_continuous(breaks = c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.05) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.05) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))
library(readr)
dt0 <- read_csv("/storage/jonathan_fine/0062_mop_reactions/guess_0/results.csv")
View(results)
View(dt0)
library(readr)
dt1 <- read_csv("/storage/jonathan_fine/0062_mop_reactions/guess_1/results.csv")
View(dt1)
library(readr)
dt2 <- read_csv("/storage/jonathan_fine/0062_mop_reactions/guess_2/results.csv")
View(dt1)
library(readr)
dt3 <- read_csv("/storage/jonathan_fine/0062_mop_reactions/guess_3/results.csv")
View(dt3)
View(dt2)
ggplot(reglog, aes(fp, kappa)) + geom_col()
ggplot(reglog, aes(fp, kappa)) + geom_col(position = "identity", fill = cutoff)
ggplot(reglog, aes(fp, kappa, fill = cutoff)) + geom_col(position = "identity")
ggplot(reglog, aes(fp, kappa, fill = factor(cutoff))) + geom_col(position = "identity")
ggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
dt0$fp <- "fp0"
dt1$fp <- "fp1"
dt2$fp <- "fp2"
dt3$fp <- "fp3"
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col()
rbind(dt0, dt1, dt2, dt3)
rbind(dt0, dt1, dt2, dt3) %>% View
ggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col()
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
ggplot(rbind(dt0, dt1, dt2), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
ggplot(rbind(dt0, dt1), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
ggplot(rbind(dt0), aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
ggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_col(position = "identity")
ggplot(reglog, aes(cutoff, kappa, fill = factor(fp))) + geom_line()
ggplot(reglog, aes(cutoff, kappa, colour = factor(fp))) + geom_line()
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, color = factor(fp))) + geom_line()
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, color = factor(fp))) + geom_line() + geom_point()
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point()
savehistory()
save.image()
savehistory()
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point()
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point()
View(reglog)
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point(size=2)
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line() + geom_point(size=3)
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=3) + geom_point(size=3)
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3)
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x="Yield Cutoff", y="Kappa") + scale_x_continuous(breaks=seq(0.1,0.9,0.1))
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x="Yield Cutoff", y="Kappa") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1))
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x="Yield Cutoff", y="Kappa") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(-0.1,1.0))
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x="Yield Cutoff", y="Kappa") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(0.0,1.0))
ggplot(reglog, aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x="Yield Cutoff", y="Kappa") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(0.0,1.0))
ggplot(rbind(dt0, dt1, dt2, dt3), aes(cutoff, kappa, shape = factor(fp), color = factor(fp))) + geom_line(size=1) + geom_point(size=3) + labs(x="Yield Cutoff", y="Kappa") + scale_x_continuous(breaks=seq(0.1,0.9,0.1)) + scale_y_continuous(breaks=seq(0,1.0,0.1), limits = c(0.0,1.0))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .11) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))
ggplot(fp0, aes(yield)) + geom_violin()
ggplot(fp0, aes(yield)) + geom_boxplot()
ggplot(fp0, aes(x1, yield)) + geom_boxplot()
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9), expand = c(0,0)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + scale_y_continuous(expand = c(0,0))
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.10001)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.1001)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.101)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.11)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(bins = 10)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.101)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4) + geom_histogram(binwidth = 0.11)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01) + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01, fill = "blue") + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,15), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)
.65 * 36
.64 * 36
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01, fill = "blue") + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,16), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)
ggplot(fp0, aes(yield)) + geom_histogram(binwidth = 0.11) + geom_histogram(binwidth = .01, fill = "blue") + scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) + scale_y_continuous(breaks = seq(1,16), expand = c(0,0)) + geom_vline(xintercept = 0.7) + geom_vline(xintercept = 0.4)
ggplot(fp0, aes(yield)) +
geom_histogram(binwidth = 0.11) +
geom_histogram(binwidth = .01, fill = "blue") +
scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) +
scale_y_continuous(breaks = seq(1,16), expand = c(0,0)) +
geom_vline(xintercept = 0.7) +
geom_vline(xintercept = 0.4)
fp0 %>%
ggplot(aes(yield)) +
geom_histogram(binwidth = 0.11) +
geom_histogram(binwidth = .01, fill = "blue") +
scale_x_continuous(breaks = c(0.0,0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9)) +
scale_y_continuous(breaks = seq(1,16), expand = c(0,0)) +
geom_vline(xintercept = 0.7) +
geom_vline(xintercept = 0.4)
library(readr)
results <- read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv")
View(results)
results %>% gather(compound, -cutoff)
results %>% gather(compound, prob, cutoff)
results %>% gather(compound, prob, -cutoff)
results %>% gather(compound, prob, -cutoff) %>% View
results %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)
results %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% View
library(readr)
results <- read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv")
View(results)
results %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% View
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)
install.packages("irr")
library(irr)
kappa2
?kappa
?kappa2
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob)
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% filter(compound != "kappa", compound != "self_score")
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>% gather(compound, prob, -cutoff) %>% spread(cutoff, prob) %>% filter(compound != "kappa", compound != "self_score") -> dt1_res
rm(results)
dt1_res
cohen.kappa
install.packages("library(psych)")
install.packages("psych")
library(psych)
cohen.kappa
library(readr)
set_bits_test <- read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/set_bits_test.csv")
View(set_bits_test)
library(readr)
test <- read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/test.csv")
View(test)
cohen.kappa(data.frame(test$yield, dt1_res$`0.7`))
cohen.kappa(data.frame(test$yield, dt1_res$`0.7` .> 0.5))
cohen.kappa(data.frame(test$yield, dt1_res$`0.7` > 0.5))
dt1_res$`0.7`
dt1_res$`0.7` > 0.5)
dt1_res$`0.7` > 0.5
cohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.7` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.4` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.4` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.1` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.2` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, dt1_res$`0.2` > 0.5)) -> derp
derp$kappa
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>%
select(-kappa, -self_score) %>% View
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob)
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
summarise_if(is.numeric, list(a = cohen.kappa(data.frame(test$yield == 1.0, .))))
read_csv("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv") -> dt1_res
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob)
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
summarise_if(is.numeric, list(a = cohen.kappa(data.frame(test$yield == 1.0, .))))
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) -> grr
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.2` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.3` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.4` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.5` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.6` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.7` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.8` > 0.5))
cohen.kappa(data.frame(test$yield == 1.0, grr$`0.9` > 0.5))
View(dt1_res)
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
summarise_if(is.numeric, list(a = cohen.kappa(data.frame(test$yield == 1.0, .))))
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
summarise_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, .))))
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
summarise_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))))
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
mutate_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))))
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
mutate_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) )
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) %>%
summarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) )
dt1_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) ->
dt1_res
dt1_res %>%
summarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%
mutate(cutoff = "kappa") %>%
rbind(dt1_res)
dt1_res %>%
summarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%
mutate(cutoff = "kappa")
View(dt1_res)
dt1_res %>%
summarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%
mutate(compound = "kappa") %>%
rbind(dt1_res)
dt1_res %>%
summarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%
mutate(compound = "kappa") %>%
rbind(dt1_res) %>%
write_csv("dt1_res.csv")
process_dt_data <- function(input, output) {
read_csv(input) -> dt_res
dt_res %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob) ->
dt_res
dt_res %>%
summarize_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ) ) %>%
mutate(compound = "kappa") %>%
rbind(dt1_res) %>%
write_csv(output)
}
process_dt_data("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp1/results.csv", "dt1_res.csv")
process_dt_data("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp2/results.csv", "dt2_res.csv")
process_dt_data("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp3/results.csv", "dt3_res.csv")
process_dt_data("/storage/jonathan_fine/0062_mop_reactions/train36_predict14/fp0/results.csv", "dt0_res.csv")
rm(dt1_res)
rm(grr)
rm(tune_grid)
rm(test, best)
rm(both, derp)
rm(grrr)
rm(model, maybe)
rm(reglog_2)
fp0 <- read_csv("../train36_predict14/fp0/set_bits.csv") %>% mutate_if(is.character, as.logical)
fp1 <- read_csv("../train36_predict14/fp1/set_bits.csv") %>% mutate_if(is.character, as.logical)
fp2 <- read_csv("../train36_predict14/fp2/set_bits.csv") %>% mutate_if(is.character, as.logical)
fp3 <- read_csv("../train36_predict14/fp3/set_bits.csv") %>% mutate_if(is.character, as.logical)
read_csv("../train36_predict14/fp0/set_bits_test.csv") %>% mutate_all(as.logical)-> sb_test_fp0
read_csv("../train36_predict14/fp1/set_bits_test.csv") %>% mutate_all(as.logical)-> sb_test_fp1
read_csv("../train36_predict14/fp2/set_bits_test.csv") %>% mutate_all(as.logical)-> sb_test_fp2
read_csv("../train36_predict14/fp3/set_bits_test.csv") %>% mutate_all(as.logical)-> sb_test_fp3
test_model <- function(fp, sb, method = "regLogistic") {
mclapply(seq(0.1, 0.9, 0.1), mc.cores = 9, function(X) {
train(factor(yield) ~ .,
data = fp %>% mutate(yield = yield > X),
trControl = tc,
method = method
) -> model
pred = predict(model, sb, type = "prob")[,2]
pred_self = mean(predict(model, fp) == (fp$yield > X))
tibble(method = method, cutoff = X, kappa = model$results$Kappa %>% max(),
c01 = pred[01], c02 = pred[02], c03 = pred[03], c04 = pred[04], c05 = pred[05],
c06 = pred[06], c07 = pred[07], c08 = pred[08], c09 = pred[09], c10 = pred[10],
c11 = pred[11], c12 = pred[12], c13 = pred[13], c14 = pred[14],
self_score = pred_self
)
}) %>% bind_rows()
}
test_all_fp_models <- function(method = "regLogistic") {
fp0_res = test_model(fp0, sb_test_fp0, method) %>% mutate(fp = "fp0")
fp1_res = test_model(fp1, sb_test_fp1, method) %>% mutate(fp = "fp1")
fp2_res = test_model(fp2, sb_test_fp2, method) %>% mutate(fp = "fp2")
fp3_res = test_model(fp3, sb_test_fp3, method) %>% mutate(fp = "fp3")
bind_rows(fp0_res, fp1_res, fp2_res, fp3_res)
}
set.seed(12345)
reglog = test_all_fp_models()
View(reglog)
?train
set.seed(12345)
test_all_fp_models("knn")
knn <- .Last.value
test_all_fp_models("lasso")
getModelInfo()
getModelInfo("lasso")
test_all_fp_models("glm")
glm < .Last.value
.Last.value
glm <- .Last.value
test_all_fp_models("pls")
View(glm)
test_all_fp_models("pls")
pls <- .Last.value
View(pls)
pca <- test_all_fp_models("pca")
mlp <- test_all_fp_models("mlp")
View(glm)
View(glm)
glm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff)
glm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff, -fp)
dt_res
dt1_res
View(dt0)
dt0 %>%
select(-kappa, -self_score) %>%
gather(compound, prob, -cutoff) %>%
spread(cutoff, prob)
glm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff, -fp) %>% spread(cutoff, prob)
glm %>% select(-kappa, -self_score, -method) %>% gather(compound, prob, -cutoff, -fp) %>% spread(cutoff, prob) %>% group_by(fp) %>% summarise_if(is.numeric, funs(cohen.kappa(data.frame(test$yield == 1.0, . > 0.5))$kappa ))
test
savehistory()
